#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
import os.path
import pathlib
import re
import sys


DICT_PATH = pathlib.Path(os.path.expanduser('~/.config/nvim/pack/default/start/spell/spell'))
SPELL_REGEX = re.compile(r'[a-z][^\.]*')


class Exit(Exception):
    def __init__(self, code, value):
        self.code = code
        self.value = value

    def __str__(self):
        return '{} Code: {} '.format(repr(self.value), self.code)


def read_words(dict_path):
    word_set = set()
    with dict_path.open() as dictionary:
        for word in dictionary:
            word_set.add(word[:-1])
    return word_set


def write_words(dict_path, word_set):
    with dict_path.open('w') as dictionary:
        for word in sorted(word_set):
            print(word, file=dictionary)
    # Note which dictionary was edited so that vim can do its mkspell magic
    last_spell = DICT_PATH.joinpath('.last-spell')
    with last_spell.open('w') as last:
        print(str(dict_path), file=last)


def get_path(name):
    path = DICT_PATH.joinpath(name)
    if not path.is_file():
        raise Exit(3, 'The dictionary "{}" doesn\'t point to a file under {} '.format(name, path))
    return path


def print_stats(old_words, new_words, merged_words):
    frm_str = '{:^7} {:^7} {:^7}'
    header_str = frm_str.format('old', 'new', 'merged')
    out_str = frm_str.format(len(old_words), len(new_words), len(merged_words))
    print(header_str)
    print(out_str)


def create_new_dictionary():
    file_name = input('Enter name:')
    if not SPELL_REGEX.fullmatch(file_name):
        raise Exit(4, 'Invalid dictionary name')
    DICT_PATH.joinpath(file_name).touch()
    return file_name


def choose_dictionary():
    files = [child.name for child in DICT_PATH.iterdir() if SPELL_REGEX.fullmatch(child.name)]
    files.sort()
    print('  x | QUIT')
    print('  n | NEW')
    for n, f in enumerate(files):
        print('{:>3} | {}'.format(n, f))
    input_value = input(':')
    if input_value == 'x':
        raise Exit(5, 'Ok, Bye!')
    if input_value == 'n':
        return create_new_dictionary()
    if not input_value.isdigit():
        raise Exit(1, 'Input needs to be a positive number')
    choice = int(input_value)
    if not 0 <= choice < len(files):
        raise Exit(2, 'Input needs to be a number between 0 and {}'.format(len(files)-1))
    return files[choice]


def main():
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('--choose', action='store_true')
    args, rest = parser.parse_known_args()
    if args.choose:
        try:
            choice = choose_dictionary()
        except Exit as exit:
            print(exit.value, file=sys.stderr)
            return exit.code

        rest.insert(0, choice)
    parser.add_argument('dictionary', help='dictionary file')
    parser.add_argument('words', nargs='*', help='words that will be added')
    args = parser.parse_args(rest)
    try:
        path = get_path(args.dictionary)
    except Exit as exit:
        print(exit.value, file=sys.stderr)
        return exit.code

    old_words = read_words(path)
    new_words = set(args.words)
    merged_words = old_words | new_words
    write_words(path, merged_words)
    print_stats(old_words, new_words, merged_words)
    return 0


if __name__ == "__main__":
    sys.exit(main())
